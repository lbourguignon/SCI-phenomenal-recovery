#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 27 15:42:25 2023

@author: blucie
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
import umap

df_window_014 = pd.read_csv('/Users/blucie/Desktop/git-repos/outstanding-recovery-SCI/outputs/df_window.1.csv')

idx = df_window_014.columns.get_loc("CORDCD01")

df_window_014_backup = df_window_014.copy()


def ohe(colors):
    ### integer mapping using LabelEncoder
    label_encoder = LabelEncoder()
    integer_encoded = label_encoder.fit_transform(colors)
    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)
    
    return integer_encoded

df_AISencoded = ohe(df_window_014['AIS.52'].to_numpy())
df_window_014['AIS.52.encoded'] = df_AISencoded
df_AISencoded = ohe(df_window_014['AIS.1'].to_numpy())
df_window_014['AIS.1.encoded'] = df_AISencoded
df_AISencoded = ohe(df_window_014['AIS.4'].to_numpy())
df_window_014['AIS.4.encoded'] = df_AISencoded

df_TX1_Rencoded = ohe(df_window_014['TX1_R'].to_numpy())
df_window_014['TX1_R.encoded'] = df_TX1_Rencoded

df_levelencoded = ohe(df_window_014['level'].to_numpy())
df_window_014['level.encoded'] = df_levelencoded

# df_window_014_subset01 = df_window_014[["CORDCD01","CORDOC01",
#                                         "DECOCD01", "DECOMC01", 
#                                         "DURACD01", "DUROCD01",
#                                         "EXCDCD01", "EXCICD01", "EXDICD01",
#                                         "FUSCD01", "FUSICD01", "IMMOBC01",
#                                         "INFXCD01", "INOPCD01", "INTFCD01",
#                                         "INTRAC01", "LAMCD101",
#                                         #"CTST01_time_combined",
#                                         #"INJ_time_combined",
#                                         #"time_decompression_surgery_old",
#                                         "time_decompression_surgery", 
#                                         "recover", "INJCD",
#                                         "SEXCD", "AGE", 'AIS.52.encoded', 
#                                         'bin_lems_improv', 'bin_uems_improv',
#                                         'ANYANA52', 'VACCD52', "TX1_R.encoded", 
#                                         'level.encoded']].copy()

df_window_014_subset01 = df_window_014[["new_PTID", "recover", "INJCD",
                                        "SEXCD", "AGE", 
                                        'AIS.52.encoded',
                                        'Lower01', 'Upper01',
                                        'Lower52', 'Upper52',
                                        'bin_lems_improv', 'bin_uems_improv',
                                        'ANYANA01', 'VACCD01',
                                        'ANYANA52', 'VACCD52', 
                                        "TX1_R.encoded", 
                                        'level.encoded']].copy()

df_window_014_subset01.fillna(-1, inplace=True)
df_window_014_subset01_X = df_window_014_subset01.drop(columns=['recover', "new_PTID", 'ANYANA52', 'VACCD52', 'AIS.52.encoded'])

reducer = umap.UMAP()
embedding = reducer.fit_transform(df_window_014_subset01_X)
embedding.shape

df_window_014_subset01.VACCD52 = df_window_014_subset01.VACCD52.astype(int)

scatter = plt.scatter(
    embedding[:, 0],
    embedding[:, 1],
    c=df_window_014_subset01['level.encoded'].astype('category').cat.codes, 
    label=df_window_014_subset01['level.encoded'].astype('category').cat.codes,
    alpha=0.5)
plt.gca().set_aspect('equal', 'datalim')
#plt.legend(handles=scatter.legend_elements()[0],
#           labels=['0', '1', '2', '3', '4'])
plt.title('UMAP projection of selection', fontsize=12)

#.map({"Yes":1, "No":0, "NA":-1})

idx = df_window_014_subset01.index[df_window_014_subset01['recover'] == 'Recovery'].tolist()
test = embedding[idx]

test_df = df_window_014_subset01.filter(items = [6, 10, 80, 103, 106, 134, 189, 205, 210, 279, 298, 313, 359, 374, 390], axis=0)

